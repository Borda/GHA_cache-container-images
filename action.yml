name: 'Cache Container Images Action'
description: ''
author: 'James Mortensen'
inputs:
  runtime:
    description: 'Container runtime engine'
    required: false
    default: 'podman'
  images:
    description: 'Container images to pull and cache'
    required: true
outputs:
  cache-hit:
    description: "True if container images were found and pulled from the cache"
    value: ${{ steps.container-images-cache.outputs.cache-hit }}
runs:
  using: 'composite'
  steps:
  - name: Validate runner
    if: runner.os != 'Linux' && runner.os != 'macOS'
    run: |
      echo "${RUNNER_OS} is not supported. Only Linux is supported at this time."
      exit 1
    shell: bash
  - name: Validate inputs
    if: inputs.runtime != 'podman'
    run: |
      echo "${{ inputs.runtime }} is not supported. Only podman is supported at this time. If you"
      echo "build your containers with Docker and push them to Docker Hub, you can still use podman"
      echo "in GitHub Actions, since container images are a standard across different runtime engines."
      exit 1
    shell: bash
      
  - name: Dump container images to file
    shell: bash
    env:
      CONTAINER_IMAGES: ${{ inputs.images }}
    run: |
      export IMAGES_URIS=`echo $CONTAINER_IMAGES | sed 's/:/\/tags\//g'`
      echo "Images URIS="$IMAGES_URIS
      echo $IMAGES_URIS | tr " " "\n" >> container-images-uris.txt
      echo $CONTAINER_IMAGES | tr " " "\n" >> container-images.txt
      cat container-images-uris.txt

  - name: Get the last updated times for the container images to build key
    run: |
      import json, os, requests
      
      def get_last_updated(tag_url):
          response = requests.get(tag_url)
          if response.status_code == 200:
              data = json.loads(response.content)
              return data['last_updated']
          return ""
      
      with open("container-images-uris.txt") as fp:
          lines = fp.readlines()
      lines = [get_last_updated(f"https://hub.docker.com/v2/repositories/{ln.strip()}/") for ln in lines]
      with open("container-images-key.txt", "w") as fp:
          fp.write(os.linesep.join(lines))
    shell: python
  - name: Show update date-times
    run: cat container-images-key.txt
    shell: bash

  - name: Check Container Images Cache 
    id: get-last-updated
    uses: actions/cache@v3
    with:
      path: cached-container-images.tar
      key: ${{ runner.os }}-${{ hashFiles('**/container-images-key.txt') }}
 
  - name: Pull Container Image if cache miss
    shell: bash
    if: steps.get-last-updated.outputs.cache-hit != 'true'
    run: |
      echo "Key was = " 
      cat container-images-key.txt
      echo "Since there was a cache miss, we will pull..."
      echo "Start pulling images at " `date`
      cat container-images.txt | while read line ; do podman pull $line ; done
      echo "Done pulling images at " `date`

  - name: Archive Container Images if cache miss
    shell: bash
    if: steps.get-last-updated.outputs.cache-hit != 'true'
    run: | 
      echo "Start archiving images at " `date`
      export OLD_PWD=$PWD
      cd $HOME
      sudo tar cf $OLD_PWD/cached-container-images.tar .local/share/containers/storage/
      sudo chown runner:docker $OLD_PWD/cached-container-images.tar
      cd $OLD_PWD
      echo "Done compression at " `date` 
 
  - name: Extract tarball if found in cache
    shell: bash
    if: steps.get-last-updated.outputs.cache-hit == 'true'
    run: |
      echo "Start extracting images at " `date`
      mkdir -p ~/.local/share/containers/
      sudo tar xf cached-container-images.tar -C $HOME
      echo "Done extracting images at " `date`
      
  - name: Set cache-hit output
    id: container-images-cache
    shell: bash
    env:
      CONTAINER_IMAGES_CACHE_HIT: ${{ steps.get-last-updated.outputs.cache-hit }}
    run: |
      echo "cache-hit=$CONTAINER_IMAGES_CACHE_HIT" >> $GITHUB_OUTPUT
      